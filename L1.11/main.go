package main

import "fmt"

// Пересечение множеств

// Реализовать пересечение двух неупорядоченных множеств (например, двух слайсов)
//  т.е. вывести элементы, присутствующие и в первом, и во втором.

// Пример:
// A = {1,2,3}
// B = {2,3,4}
// Пересечение = {2,3}

func main() {
	s1 := []int{1, 2, 3}
	s2 := []int{2, 3, 4}

	intersect := intersection(s1, s2)
	fmt.Println(intersect)
}

// Возвращает слайс, представляющий собой пересечение двух слайсов
func intersection(a, b []int) []int {
	// Создаем множество для хранения чисел, встретившихся в первом множестве
	// мапа со значением пустой структуры является идиоматичным способом,
	// так как последняя не занимает памяти
	set := make(map[int]struct{})

	for _, v := range a {
		set[v] = struct{}{}
	}

	result := make([]int, 0)
	for _, v := range b {
		// Проверяем, что число существует в множестве
		if _, ok := set[v]; ok {
			result = append(result, v)
			// По формулировке задания до конца не уверен что делать с дубликатами,
			// но логично что при пересечении множеств элементы должны быть уникальными,
			// поэтому после добавления значения в результат удаляем ключ, чтобы
			// при нахождении дубликата он не добавился в итоговый слайс
			delete(set, v)
		}
	}

	return result
}
